name: Deploy ARM to prod and playground

on:
  push:
    branches: [release]

jobs:
  deploy-sql-server:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        deploy: [prod, playground]
    env:
      RESOURCE_GROUP: cost-allocation
      DB_NAME: sqldb-radix-cost-allocation
      DB_USER_NAME: radix
      FIREWALL_RULE_NAME: githubRunnerIp
      ADMIN_GROUP_NAME: 'Radix Platform Developers'
      ADMIN_GROUP_ID: "a5dfa635-dc00-4a28-9ad9-9e7f1e56919d"
    steps:       
      - uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          RADIX_ENV="dev" && [[ ${{ matrix.deploy }} == 'prod' ]] && RADIX_ENV="prod"

          echo "::set-env name=SQL_SERVER_NAME::sql-radix-cost-allocation-${{ matrix.deploy }}"
          echo "::set-env name=KEY_VAULT_NAME::radix-vault-$RADIX_ENV"
          echo "::set-env name=SQL_LOG_STORAGE_NAME::radixsqllogs${RADIX_ENV}"
      - uses: Azure/login@v1.1
        if: ${{ matrix.deploy == 'playground' }}
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - uses: Azure/login@v1.1
        if: ${{ matrix.deploy == 'prod' }}
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
          enable-AzPSSession: true
      - uses: Azure/get-keyvault-secrets@v1.0
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secrets: "radix-cost-allocation-db-admin"
        id: adminPassword
      - name: Deploy SQL Server and DB
        env:
          DEPLOY_NAME: radix-cost-db-deploy
        run: |
          az deployment group create -g $RESOURCE_GROUP -n $DEPLOY_NAME \
            --template-file ./azure-infrastructure/azuredeploy.json \
            --parameters sqlServerName=$SQL_SERVER_NAME \
            --parameters databaseName=$DB_NAME \
            --parameters sqlAdministratorLoginPassword=${{ steps.adminPassword.outputs.radix-cost-allocation-db-admin }} \
            --parameters sqlAdministratorLoginUser=$DB_USER_NAME \
            --parameters adminGroupName=$ADMIN_GROUP_NAME \
            --parameters adminGroupId=$ADMIN_GROUP_ID \
            --parameters storageAccountId=$storageId
      - name: Whitelist Runner IP in firewalls
        shell: pwsh
        run: |
          $runnerIp = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          az sql server firewall-rule create `
            --end-ip-address $runnerIp `
            --start-ip-address $runnerIp `
            --name ${env:FIREWALL_RULE_NAME} `
            --resource-group ${env:RESOURCE_GROUP} `
            --server ${env:SQL_SERVER_NAME}
      - name: Creating DB schema and tables
        shell: pwsh
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
          Install-Module -Name SqlServer

          $targetSqlServerFQDN = "$(az sql server show -n ${env:SQL_SERVER_NAME} -g ${env:RESOURCE_GROUP} | jq -r .fullyQualifiedDomainName)"

          $ds = Invoke-Sqlcmd -Query "SELECT * FROM sys.schemas WHERE name IN ('cost', 'dbo')" -As DataSet -ServerInstance $targetSqlServerFQDN -Database ${env:DB_NAME} -Username ${env:DB_USER_NAME} -password ${{ steps.adminPassword.outputs.radix-cost-allocation-db-admin }}
          if($ds.Tables[0].Rows.Count -eq 1) 
          {
            Invoke-Sqlcmd -InputFile ./azure-infrastructure/createSchema.sql -ServerInstance $targetSqlServerFQDN -Database ${env:DB_NAME} -Username ${env:DB_USER_NAME} -password ${{ steps.adminPassword.outputs.radix-cost-allocation-db-admin }}
          }
          Invoke-Sqlcmd -InputFile ./azure-infrastructure/createTables.sql -ServerInstance $targetSqlServerFQDN -Database ${env:DB_NAME} -Username ${env:DB_USER_NAME} -password ${{ steps.adminPassword.outputs.radix-cost-allocation-db-admin }}
      - name: Blacklist Runner IP in firewalls
        shell: pwsh
        if: ${{ always() }}
        run: |
          $runnerIp = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          az sql server firewall-rule delete `
            --name ${env:FIREWALL_RULE_NAME} `
            --resource-group ${env:RESOURCE_GROUP} `
            --server ${env:SQL_SERVER_NAME}
