name: Docker Image CI

on:
  push:
    branches: [master, keaaa]

jobs:
  build-deploy-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build the Docker image
        run: |
          IMAGE_TAG=${GITHUB_REF##*/}-${{ github.sha }}
          docker build -t radixdev.azurecr.io/radix-cost-exporter:$IMAGE_TAG .
      - uses: azure/docker-login@v1
        with:
          login-server: radixdev.azurecr.io
          username: ${{ secrets.DEV_REGISTRY_USERNAME }}
          password: ${{ secrets.DEV_REGISTRY_PASSWORD }}
      - name: push to radixdev
        run: |
          IMAGE_TAG=${GITHUB_REF##*/}-${{ github.sha }}
          docker push radixdev.azurecr.io/radix-cost-exporter:$IMAGE_TAG
  deploy-db-arm-template:
    runs-on: ubuntu-latest
    env:
      DEPLOY_NAME: radix-cost-db-deploy
      RESOURCE_GROUP: common
      KEY_VAULT_NAME: radix-vault-dev
      SECRET_NAME: radix-cost-allocation-db-admin
      SQL_SERVER_NAME: radix-cost-allocation
      DB_NAME: radix-cost-allocation-db
    steps:
      - uses: actions/checkout@v2
      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: deploy-arm-template
        run: |
          az deployment group create -g $RESOURCE_GROUP -n $DEPLOY_NAME \
            --template-file ./azure-infrastructure/azuredeploy.json \
            --parameters sqlServerName=$SQL_SERVER_NAME \
            --parameters databaseName=$DB_NAME \
            --parameters sqlAdministratorLoginPassword=${{ secrets.DB_PASSWORD }}
      - name: apply-sql-script
        shell: pwsh
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
          Install-Module -Name SqlServer
          Import-Module SqlServer
          
          $targetSqlPassword = (Get-AzKeyVaultSecret -vaultName $KEY_VAULT_NAME -name $SECRET_NAME).SecretValue
          $targetSqlServer = Get-AzSqlServer -ServerName $SQL_SERVER_NAME -ResourceGroupName $RESOURCE_GROUP
          $connectionString = 'Server=$targetSqlServer.FullyQualifiedDomainName;Database=$DB_NAME;User Id=$targetSqlServer.administratorLogin;Password=$targetSqlPassword'

          $ds = Invoke-Sqlcmd -Query "SELECT * FROM sys.schemas WHERE name IN ('cost', 'dbo')" -As DataSet -ConnectionString $connectionString
          if($ds.Tables[0].Rows.Count -eq 1) 
          {
            Invoke-Sqlcmd -InputFile ./azure-infrastructure/createSchema.sql -ConnectionString $connectionString
          }
          Invoke-Sqlcmd -InputFile ./azure-infrastructure/createTables.sql -ConnectionString $connectionString
